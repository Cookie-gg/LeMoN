@function entry_order($times) {
  @if $times == 1 {
    @return 0.6s;
  }
  @return 0.6 * ($times - 1) + 0.6s;
}
@function order($times) {
  @return 0.6 * ($times - 1) + 0s;
}
@function str_replace($substr, $newsubstr, $str, $all: false) {
  $str: '#{$str}';
  $pos: str-index($str, $substr);

  @while $pos != null {
    $strlen: str-length($substr);
    $start: str-slice($str, 0, $pos - 1);
    $end: str-slice($str, $pos + $strlen);
    $str: $start + $newsubstr + $end;

    @if $all == true {
      $pos: str-index($str, $substr);
    } @else {
      $pos: null;
    }
  }
  @return $str;
}
@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}